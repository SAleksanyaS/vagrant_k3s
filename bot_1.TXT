config/config.py
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞: –∑–¥–µ—Å—å –∑–∞–¥–∞—é—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚Äì —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º Excel. –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã —Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —É–∫–∞–∑–∞–Ω—ã —Å—Ç–∞—Ç–∏—á–Ω–æ.
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import os

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SberChat). 
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SBERCHAT_BOT_TOKEN.
BOT_TOKEN = os.getenv("SBERCHAT_BOT_TOKEN", "")

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º Excel –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ –ª–æ–≥–æ–≤.
KNOWLEDGE_FILE = "knowledge_base.xlsx"
LOG_FILE = "bot_logs.xlsx"
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: —Ñ–ª–∞–≥ SBERCHAT_BOT_TOKEN —Å–ª–µ–¥—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.
domain/knowledge_base.py
–ú–æ–¥—É–ª—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ó–¥–µ—Å—å –∫–ª–∞—Å—Å KnowledgeBase –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç. –î–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è difflib.SequenceMatcher
typesense.org
. –ß–µ–º –≤—ã—à–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (ratio), —Ç–µ–º –±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏ —Å—Ç—Ä–æ–∫–∏. –í –∫–æ–¥–µ –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º –±–∞–∑—ã (–≤–æ–ø—Ä–æ—Å‚Äì–æ—Ç–≤–µ—Ç) –∏ –≤—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç. –ï—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫–∞–∑–∞–ª—Å—è –Ω–∏–∂–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞.
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from difflib import SequenceMatcher

class KnowledgeBase:
    def __init__(self, repository):
        # repository –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –º–µ—Ç–æ–¥ get_all(), –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ (–≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç)
        self.repo = repository

    def find_best_answer(self, query: str) -> str:
        query = query.strip().lower()
        best_score = 0.0
        best_answer = None
        for question, answer in self.repo.get_all():
            if question is None or answer is None:
                continue
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            score = SequenceMatcher(None, question.lower(), query).ratio()
            if score > best_score:
                best_score = score
                best_answer = answer
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50% —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
        if best_score < 0.5 or best_answer is None:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."
        return best_answer
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SequenceMatcher –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫
typesense.org
. –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–µ —Å—Ö–æ–∂–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–∫–∞–∑.
application/handle_message.py
–°–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: –∑–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è handle_message —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ê–ª–≥–æ—Ä–∏—Ç–º —Å–ª–µ–¥—É—é—â–∏–π:
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥ –±–æ—Ç–∞ @rmoconboarding. –¢–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—á–∞–µ–º (–∏–Ω–∞—á–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
codu.co
.
–£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –∏—â–µ–º –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω KnowledgeBase.
–õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ Excel (—Å–º. Infrastructure –Ω–∏–∂–µ).
–§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —á–∞—Ç.
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from config.config import KNOWLEDGE_FILE, LOG_FILE
from infrastructure.excel_repository import ExcelRepository
from domain.knowledge_base import KnowledgeBase
from interface.message_builder import MessageBuilder

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–º–µ–Ω–∞
excel_repo = ExcelRepository(KNOWLEDGE_FILE, LOG_FILE)
knowledge = KnowledgeBase(excel_repo)

def handle_message(message_event, api):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. 
    message_event —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ç—Ä–∏–±—É—Ç—ã: peer (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞) –∏ text.
    api ‚Äî —ç–∫–∑–µ–º–ø–ª—è—Ä SberChatAPI –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    try:
        text = message_event.text or ""
        peer = message_event.peer
        # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
        if not text or "@rmoconboarding" not in text:
            return
        # –£–¥–∞–ª—è–µ–º —Ç–µ–≥ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        query = text.replace("@rmoconboarding", "").strip()
        # –ò—â–µ–º –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ
        answer = knowledge.find_best_answer(query)
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (peer, –∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç)
        excel_repo.log_chat(peer, query, answer)
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´üëç¬ª/¬´üëé¬ª
        builder = MessageBuilder(peer)
        builder.set_text(answer)
        builder.add_button("üëç", "like")
        builder.add_button("üëé", "dislike")
        response = builder.build()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
        api.send_message(response)
    except Exception as e:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤ –ª–æ–≥-—Ñ–∞–π–ª, –Ω–æ –Ω–µ –∫–∏–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        excel_repo.log_error(str(e))
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –≤ —ç—Ç–æ–º —Å–ª–æ–µ –º—ã –∫–æ–º–ø–æ–Ω—É–µ–º –≥–æ—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –≤–µ—Å—å –∫–æ–¥ –æ–±–µ—Ä–Ω—É—Ç –≤ try/except, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏ –∑–∞–ø–∏—Å—ã–≤–∞–ª –∏—Ö –≤ –ª–æ–≥
medium.com
.
application/handle_callback.py
–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç ¬´–ª–∞–π–∫¬ª –∏–ª–∏ ¬´–¥–∏–∑–ª–∞–π–∫¬ª, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è handle_callback. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª ¬´–ª–∞–π–∫¬ª, –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –∫—Ä–æ–º–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ ¬´–¥–∏–∑–ª–∞–π–∫¬ª, –±–æ—Ç –¥–µ–ª–∞–µ—Ç reply –≤ —á–∞—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º @sasha –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞.
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from config.config import LOG_FILE
from infrastructure.excel_repository import ExcelRepository

excel_repo = ExcelRepository(None, LOG_FILE)  # None –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–≥-—Ñ–∞–π–ª

def handle_callback(callback_event, api):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏. 
    callback_event —Å–æ–¥–µ—Ä–∂–∏—Ç: peer (—á–∞—Ç), data ('like' –∏–ª–∏ 'dislike'), 
    –∏ message_id (ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º).
    """
    try:
        peer = callback_event.peer
        action = callback_event.data  # 'like' –∏–ª–∏ 'dislike'
        msg_id = callback_event.message_id
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        excel_repo.log_feedback(peer, msg_id, action)
        if action == "dislike":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ–≤–æ–ª–µ–Ω ‚Äî –¥–µ–ª–∞–µ–º reply —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            reply_text = "@sasha –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –æ—Ç–≤–µ—Ç–æ–º"
            api.send_message(peer, reply_text, reply_to=msg_id)
    except Exception as e:
        excel_repo.log_error(str(e))
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –≤ handle_callback –º—ã –ª–æ–≥–∏—Ä—É–µ–º –æ–±–∞ —Å–æ–±—ã—Ç–∏—è (¬´–ª–∞–π–∫¬ª –∏ ¬´–¥–∏–∑–ª–∞–π–∫¬ª) –≤ —Ç–∞–±–ª–∏—Ü—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü—Ä–∏ ¬´–¥–∏–∑–ª–∞–π–∫–µ¬ª –±–æ—Ç –¥–µ–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (reply) —Å —Ç–µ–∫—Å—Ç–æ–º ¬´@sasha –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –æ—Ç–≤–µ—Ç–æ–º¬ª –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç.
infrastructure/excel_repository.py
–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Å–ª–æ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel. –ö–ª–∞—Å—Å ExcelRepository —á–∏—Ç–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –≤–µ–¥–µ—Ç –ª–æ–≥–∏. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ Excel –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl
geeksforgeeks.org
. –û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å *.xlsx-—Ñ–∞–π–ª—ã. –ú–µ—Ç–æ–¥ append() –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ –ª–∏—Å—Ç–∞
stackoverflow.com
.
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import os
from datetime import datetime
from openpyxl import Workbook, load_workbook

class ExcelRepository:
    def __init__(self, kb_path, log_path):
        """
        kb_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (.xlsx) –∏–ª–∏ None.
        log_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (.xlsx).
        """
        self.kb_path = kb_path
        self.log_path = log_path

    def get_all(self):
        """–ß–∏—Ç–∞–µ—Ç –≤—Å–µ (–≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç) –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
        if not self.kb_path or not os.path.exists(self.kb_path):
            return []
        wb = load_workbook(self.kb_path)
        sheet = wb.active
        qa_list = []
        for row in sheet.iter_rows(min_row=2, values_only=True):
            question, answer = row[:2]
            qa_list.append((str(question), str(answer)))
        return qa_list

    def _init_log_workbook(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
        wb = Workbook()
        ws_chat = wb.active
        ws_chat.title = "chat_history"
        ws_chat.append(["Timestamp", "Peer", "Message", "Answer"])
        ws_fb = wb.create_sheet("feedback")
        ws_fb.append(["Timestamp", "Peer", "AnswerMsgID", "Feedback"])
        ws_err = wb.create_sheet("full_log")
        ws_err.append(["Timestamp", "Error"])
        wb.save(self.log_path)

    def _append_row(self, sheet_name, row):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É row –Ω–∞ –ª–∏—Å—Ç sheet_name, —Å–æ–∑–¥–∞–≤–∞—è —Ñ–∞–π–ª/–ª–∏—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        if not os.path.exists(self.log_path):
            self._init_log_workbook()
        wb = load_workbook(self.log_path)
        if sheet_name not in wb.sheetnames:
            # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
            wb.create_sheet(sheet_name)
        ws = wb[sheet_name]
        ws.append(row)
        wb.save(self.log_path)

    def log_chat(self, peer, message, answer):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞: peer, —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç."""
        timestamp = datetime.now().isoformat()
        self._append_row("chat_history", [timestamp, peer, message, answer])

    def log_feedback(self, peer, message_id, feedback):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å: peer, ID —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç–∞ –∏ —Ç–∏–ø (like/dislike)."""
        timestamp = datetime.now().isoformat()
        self._append_row("feedback", [timestamp, peer, message_id, feedback])

    def log_error(self, error_text):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –≤ –æ–±—â–∏–π –ª–æ–≥."""
        timestamp = datetime.now().isoformat()
        self._append_row("full_log", [timestamp, error_text])
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –º–µ—Ç–æ–¥—ã _append_row –∏ append() –∏–∑ openpyxl –¥–æ–±–∞–≤–ª—è—é—Ç –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞
stackoverflow.com
. –ï—Å–ª–∏ —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º—ã —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å —Ç—Ä–µ–º—è –ª–∏—Å—Ç–∞–º–∏: chat_history, feedback, full_log –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ª–∏—Å—Ç—ã.
infrastructure/sberchat_sdk.py
–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å SberChat API. –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å SDK –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞. –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK –∏–ª–∏ REST API SberChat. –ó–¥–µ—Å—å –ø—Ä–∏–≤–µ–¥–µ–Ω –ø—Å–µ–≤–¥–æ–∫–æ–¥:
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
class SberChatAPI:
    def __init__(self, token):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SberChat (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ HTTP)
        self.token = token
        self.message_handler = None
        self.button_handler = None

    def on_message(self, handler):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.message_handler = handler

    def on_button(self, handler):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫."""
        self.button_handler = handler

    def send_message(self, message, reply_to=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. 
        message: –æ–±—ä–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π MessageBuilder (—Å–º. interface/message_builder).
        reply_to: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∞–µ–º reply.
        """
        # –ü—Ä–∏–º–µ—Ä: –≤—ã–∑–æ–≤ API –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SDK SberChat.
        pass

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å WebSocket-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ polling.
        while True:
            event = self._get_next_event()
            if event.type == 'message':
                if self.message_handler:
                    self.message_handler(event, self)
            elif event.type == 'callback':
                if self.button_handler:
                    self.button_handler(event, self)

    def _get_next_event(self):
        """–ó–∞–≥–ª—É—à–∫–∞: –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)."""
        pass
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏/–ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Ä—Å–∏–∏ SDK SberChat. –ú—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –∫–Ω–æ–ø–∫–∞–º–∏) –ø–æ peer –∏ reply_to.
interface/message_builder.py
–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏. –° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ (widgets) –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ (¬´–ª–∞–π–∫¬ª/¬´–¥–∏–∑–ª–∞–π–∫¬ª). –ú–Ω–æ–≥–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Chat) –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∫–Ω–æ–ø–∫–∏) –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
developers.google.com
. –ó–¥–µ—Å—å –∫–ª–∞—Å—Å MessageBuilder —Å–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API.
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
class Button:
    def __init__(self, label, action):
        """
        label: —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'üëç' –∏–ª–∏ 'üëé').
        action: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è ('like' –∏–ª–∏ 'dislike').
        """
        self.label = label
        self.action = action

class Message:
    def __init__(self, peer, text, buttons=None):
        self.peer = peer
        self.text = text
        self.buttons = buttons or []

class MessageBuilder:
    def __init__(self, peer):
        self.peer = peer
        self.text = ""
        self.buttons = []

    def set_text(self, text):
        self.text = text

    def add_button(self, label, action):
        self.buttons.append(Button(label, action))

    def build(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        return Message(self.peer, self.text, self.buttons)
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –≤ —ç—Ç–æ–º —Å–ª–æ–µ –º—ã –æ—Ç–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏. –ú—ã —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ¬´üëç¬ª –∏ ¬´üëé¬ª —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º action), –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ SberChatAPI.send_message().
main.py
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ó–¥–µ—Å—å –º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API-–∫–ª–∏–µ–Ω—Ç SberChat, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏. –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –∏–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç SDK. –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ:
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from config.config import BOT_TOKEN
from infrastructure.sberchat_sdk import SberChatAPI
from application.handle_message import handle_message
from application.handle_callback import handle_callback

def main():
    # –°–æ–∑–¥–∞–µ–º API-–∫–ª–∏–µ–Ω—Ç –±–æ—Ç–∞
    api = SberChatAPI(BOT_TOKEN)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    api.on_message(handle_message)
    api.on_button(handle_callback)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)
    api.start()

if __name__ == "__main__":
    main()
